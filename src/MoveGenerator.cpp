#include "MoveGenerator.hpp"
MoveGenerator::MoveGenerator() {}

MoveGenerator::~MoveGenerator() {}

std::list<Move> MoveGenerator::generateMoves(Board board) {
    std::list<Move> moves;
    for (char i = 0; i < 64; ++i) {
        if (board.pieces[i] == Piece::EMPTY) {
            continue;
        }
        if (((board.pieces[i] & Piece::WHITE) == Piece::WHITE) !=
            board.whiteActive) {
            continue;
        }
        switch (board.pieces[i] & Piece::PIECE_MASK) {
            case Piece::PAWN:
                // appends the list of moves generated by generatePawnMoves
                moves.splice(moves.end(), generatePawnMoves(board, i));
                break;
            case Piece::KNIGHT:
                moves.splice(moves.end(), generateKnightMoves(board, i));
                break;
            case Piece::BISHOP:
               moves.splice(moves.end(), generateDiagonalMoves(board, i));
                break;
            case Piece::ROOK:
                moves.splice(moves.end(), generateStraightMoves(board, i));
            case Piece::QUEEN: {
                moves.splice(moves.end(), generateDiagonalMoves(board, i));
                moves.splice(moves.end(), generateStraightMoves(board, i));
                break;
            }
            case Piece::KING:
                moves.splice(moves.end(), generateKingMoves(board, i));
                break;
            default:
                break;
        }
    }
    return moves;
}



